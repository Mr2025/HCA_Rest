////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// EXPRESS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

const express = require('express');
const router = express.Router();
const hcaProxy = require('hca-proxy');
const hca = hcaProxy('hca-rest-client',null,0x00FF);

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ROUTE ENDPOINTS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

const FlagRoute =  require('./routes/flag.js');
const DeviceRoute = require('./routes/device.js');

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// WEB ROUTES
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const flag = new FlagRoute(hca);
const device = new DeviceRoute(hca);
//router.get  ('/',                           (req,res,next)=>{});						// Noop @ home path
router.get  ('/fhem/:flag',                 flag.processFhem.bind(flag)); 						    // SetFlag with Fhem Syntax [EgiGeoZone] 
router.get  ('/own/:flag',                  flag.processOwn.bind(flag)); 						    // SetFlag with Fhem Syntax [OwnTrack] 

router.get  ('/flag/:flag',                 flag.processGet.bind(flag)); 						    // GetFlag with name (:flag)
router.post ('/flag/:flag/:value',          flag.processPost.bind(flag));						    // postFlag with value(:value)

router.get  ('/device/:device',             device.processGet.bind(device)); 						// GetDevice with name (:flag)
router.post ('/device/:device/:value',      device.processPost.bind(device));						// postDevice with value(:value)

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// EVENT Handlers
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
router.onConnect = ()=>{
    //console.trace();
    hca.openServer(process.env.HCA_SERVER_IP,process.env.HCA_SERVER_PORT);
}
router.onClose = ()=>{
    //console.trace();
    hca.closeServer();
}
module.exports = router;
